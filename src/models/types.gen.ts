// This file is auto-generated by @hey-api/openapi-ts

export type Availability = {
  /**
   * A unique identifier for this availability. This ID is used during booking and must be unique within the scope of an option.
   */
  id: string;
  /**
   * The start time for this availability in the product’s local time zone. This value must conform to ISO 8601 standards (e.g., "2024-11-17T09:00:00+00:00").
   */
  localDateTimeStart: string;
  /**
   * The end time for this availability in the product’s local time zone. It must also adhere to ISO 8601 standards.
   */
  localDateTimeEnd: string;
  /**
   * The time by which the booking must be confirmed at
   */
  utcCutoffAt: string;
  /**
   * Indicates if this availability spans the entire day. If set to true, there will be no specific start or end times for this availability.
   */
  allDay: boolean;
  /**
   * Indicates if there are remaining slots available for this date or time slot.
   */
  available: boolean;
  /**
   * Defines the current status of the availability:
   * AVAILABLE: Open for booking.
   * FREESALE: Unlimited availability, no capacity limits.
   * SOLD_OUT: No spots available.
   * LIMITED: Less than 50% capacity remaining.
   * CLOSED: The availability is closed.
   */
  status: AvailabilityStatus;
  /**
   * Specifies the number of available slots remaining. Should be nulled or omitted when status is FREESALE. If availability is tracked per unit, this represents the maximum remaining quantity across all units.
   */
  vacancies: number | null;
  /**
   * The total capacity for this availability.
   */
  capacity: number | null;
  /**
   * The maximum number of units that can be sold in a single booking during this availability slot.
   */
  maxUnits: number | null;
  /**
   * Defines the opening hours for this availability, even for start time-based availability. Supports multiple periods for breaks in the day.
   */
  openingHours: Array<OpeningHours>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  unitPricing?: Array<PricingUnit>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Pricing;
  /**
   * The public, customer-facing for the availablity. This name is displayed to end customers and should accurately represent the option for marketing and sales purposes. Can be null when not appliable
   */
  title?: string | null;
  /**
   * A brief, customer-facing description of the availability. This field provides a concise overview of availability.
   */
  shortDescription?: string;
};

export type AvailabilityCalendar = {
  /**
   * The specific date for querying availability on Availability Calendar endpoint. This field must follow the ISO 8601 date format (e.g., 2024-11-18). It ensures standardized representation of dates across different systems.
   */
  localDate: string;
  /**
   * Indicates whether there is any remaining availability for the specified date.
   * true: Availability exists.
   * false: Fully booked or unavailable.
   */
  available: boolean;
  /**
   * Defines the current status of the availability date:
   * AVAILABLE: Open for booking.
   * FREESALE: Unlimited availability, no capacity limits.
   * SOLD_OUT: No spots available.
   * LIMITED: Less than 50% capacity remaining.
   * CLOSED: The availability is closed.
   */
  status: AvailabilityStatus;
  /**
   * Specifies the number of available slots remaining quantity (highest remaining vacancies from all availabilities of this day). Should be nulled or omitted when status is FREESALE.
   */
  vacancies: number | null;
  /**
   * The total capacity for this availability date.
   */
  capacity: number | null;
  /**
   * Defines the opening hours for this availability, even for start time-based availability. Supports multiple periods for breaks in the day.
   */
  openingHours: Array<OpeningHours>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  unitPricingFrom?: Array<PricingUnit>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricingFrom?: Pricing;
};

export type AvailabilityCalendarBody = {
  /**
   * The product id.
   */
  productId: string;
  /**
   * The option id.
   */
  optionId: string;
  /**
   * Start date to query for (YYYY-MM-DD).
   */
  localDateStart?: string;
  /**
   * End date to query for (YYYY-MM-DD).
   */
  localDateEnd?: string;
  /**
   * A list of units.
   */
  units?: Array<AvailabilityUnit>;
  /**
   * Can be used only when pricing capability is used.
   */
  currency?: string | null;
};

export type AvailabilityCalendarPricing = {
  /**
   * Is on the object when Pricing capability is requested.
   */
  unitPricingFrom?: Array<PricingUnit>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricingFrom?: Pricing;
};

export type AvailabilityCalendarPricingBody = {
  /**
   * Can be used only when pricing capability is used.
   */
  currency?: string | null;
};

export type AvailabilityCalendarRequest = {
  body: AvailabilityCalendarBody;
};

export type AvailabilityCheckBody = {
  /**
   * The product id.
   */
  productId: string;
  /**
   * The option id.
   */
  optionId: string;
  /**
   * Start date to query for (YYYY-MM-DD). Required if `localDateEnd` is set.
   */
  localDateStart?: string;
  /**
   * End date to query for (YYYY-MM-DD). Required if `localDateStart` is set.
   */
  localDateEnd?: string;
  /**
   * Filter the results by the given ids.
   */
  availabilityIds?: Array<string>;
  /**
   * A list of units.
   */
  units?: Array<AvailabilityUnit>;
  /**
   * Can be used only when pricing capability is used.
   */
  currency?: string | null;
};

export type AvailabilityCheckRequest = {
  body: AvailabilityCheckBody;
};

export type AvailabilityContent = {
  /**
   * The public, customer-facing for the availablity. This name is displayed to end customers and should accurately represent the option for marketing and sales purposes. Can be null when not appliable
   */
  title?: string | null;
  /**
   * A brief, customer-facing description of the availability. This field provides a concise overview of availability.
   */
  shortDescription?: string;
};

export type AvailabilityPricing = {
  /**
   * Is on the object when Pricing capability is requested.
   */
  unitPricing?: Array<PricingUnit>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Pricing;
};

export type AvailabilityPricingBody = {
  /**
   * Can be used only when pricing capability is used.
   */
  currency?: string | null;
};

export enum AvailabilityStatus {
  AVAILABLE = 'AVAILABLE',
  FREESALE = 'FREESALE',
  SOLD_OUT = 'SOLD_OUT',
  LIMITED = 'LIMITED',
  CLOSED = 'CLOSED',
}

export enum AvailabilityType {
  START_TIME = 'START_TIME',
  OPENING_HOURS = 'OPENING_HOURS',
}

/**
 * A list of units.
 */
export type AvailabilityUnit = {
  /**
   * The unit id.
   */
  id: string;
  /**
   * The quantity of the unit.
   */
  quantity: number;
};

export type BaseError = {
  /**
   * The error code. A table of possible error codes is shown below.
   */
  error: string;
  /**
   * A human-readable error message will be translated depending on the language provided by the Accept-Language header.
   */
  errorMessage: string;
};

export type Booking = {
  /**
   * A unique identifier generated by the supplier system for the booking. This ID ensures traceability and must be unique within the system.
   */
  id: string;
  /**
   * An optional idempotency key set when creating a booking to prevent duplicate bookings in case of retries. Used for API calls.
   */
  uuid: string;
  /**
   * Indicates whether the booking was created in test mode. If true, it is a test booking.
   */
  testMode: boolean;
  /**
   * A reference provided by the reseller to identify the booking.
   */
  resellerReference: string | null;
  /**
   * A reference provided by the reseller to identify the booking.
   */
  supplierReference: string | null;
  /**
   * Represents the current state of the booking:
   * ON_HOLD: Awaiting confirmation.
   * EXPIRED: Not confirmed within the hold expiration time.
   * CONFIRMED: Successfully confirmed.
   * CANCELLED: The booking was canceled.
   * PENDING: Awaiting external confirmation.
   * REDEEMED: The booking has been used.
   */
  status: BookingStatus;
  /**
   * An ISO8601 date time in UTC when the booking was created.
   */
  utcCreatedAt: string;
  /**
   * An ISO8601 date time in UTC when the booking was last updated, if applicable.
   */
  utcUpdatedAt: string;
  /**
   * An ISO8601 date times in UTC for when this booking is due to expire if the status is ON_HOLD.
   */
  utcExpiresAt: string | null;
  /**
   * An ISO8601 date time in UTC at when the booking was redeemed, if applicable.
   */
  utcRedeemedAt: string | null;
  /**
   * An ISO8601 date time in UTC when the booking was confirmed, if applicable.
   */
  utcConfirmedAt: string | null;
  /**
   * The ID of product booked.
   */
  productId: string;
  /**
   * The object of booked product.
   */
  product?: Product;
  /**
   * The ID of option booked.
   */
  optionId: string;
  /**
   * The ID of option booked.
   */
  option?: Option;
  /**
   * The object of booked option.
   */
  cancellable: boolean;
  /**
   * A boolean field indicating whether this booking can be cancelled.
   */
  cancellation: BookingCancellation | null;
  /**
   * Indicates if the booking was made without checking availability.
   */
  freesale: boolean;
  /**
   * The ID of availability booked.
   */
  availabilityId: string | null;
  /**
   * The availability object that was booked.
   */
  availability: Availability | null;
  /**
   * Customer contact details for the booking (see unit object for per ticket / unit details).
   */
  contact: Contact;
  /**
   * Customer-facing public notes for the booking.
   */
  notes: string | null;
  /**
   * Specifies all supported methods of how tickets or vouchers for this booking are delivered.
   * TICKET: Delivered individually per unit in the booking, where each person or unit receives a separate ticket. These will be provided in the ticket object.
   * VOUCHER: Delivered as a single voucher for the entire booking, consolidating all units under one document. These will be provided in the voucher object.
   * This field ensures clarity on the format of ticket or voucher delivery to resellers and customers.
   */
  deliveryMethods: Array<DeliveryMethod>;
  /**
   * Details for voucher-based delivery, provided when VOUCHER is one of deliveryMethods.
   */
  voucher: Ticket | null;
  /**
   * An array of unit items included in the booking.
   */
  unitItems: Array<UnitItem>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Pricing;
};

export type BookingCancellation = {
  /**
   * Whether the booking was refunded as part of the cancellation. Possible values are FULL, PARTIAL or NONE
   */
  refund: Refund;
  /**
   * A text value describing why the cancellation happened.
   */
  reason: string | null;
  /**
   * An ISO8601 date time in UTC indicating when the booking was cancelled.
   */
  utcCancelledAt: string;
};

export type BookingCancellationBody = {
  /**
   * A text value describing why the cancellation happened.
   */
  reason?: string;
  /**
   * Whether you want OCTO Cloud to email the guest a copy of their receipt and tickets. (defaults to false)
   */
  force?: boolean;
};

export type BookingCancellationPathParams = {
  /**
   * The UUID of the booking
   */
  uuid: string;
};

export type BookingConfirmationBody = {
  /**
   * Whether you want OCTO Cloud to email the guest a copy of their receipt and tickets. (defaults to false)
   */
  emailReceipt?: boolean;
  /**
   * Your reference for this booking. Also known as a Voucher Number.
   */
  resellerReference?: string;
  /**
   * Contact details for the main guest who will attend the tour/attraction. Contact BODY can be applied to both the booking object (the main reservation) or the unit object (individual ticket holders - if the supplier requires this information).
   */
  contact: BookingContact;
  /**
   * An array of unit items that will be included in the booking. This allows you to provide contact details or a reseller reference for each unit item. Be careful to make sure you include ALL unit items that you also had in the original booking reservation request, if you provide more or less than in the booking reservation call this will change the number of unit items being purchased also.
   */
  unitItems?: Array<BookingUnitItem>;
};

export type BookingConfirmationPathParams = {
  /**
   * The UUID of the booking
   */
  uuid: string;
};

export type BookingContact = {
  /**
   * The full name of the booking holder or the ticket holder. Can also be retrieved as an alias for the concatenation of `firstName` and `lastName`
   */
  fullName?: string;
  /**
   * The first name of the booking holder or the ticket holder.
   */
  firstName?: string;
  /**
   * The last name of the booking holder or the ticket holder.
   */
  lastName?: string;
  /**
   * The email address of the booking holder or the ticket holder.
   */
  emailAddress?: string;
  /**
   * The phone number of the booking holder or the ticket holder.
   */
  phoneNumber?: string;
  /**
   * An array of locale values, equivalent to navigator.languages in a browsers environment.
   */
  locales?: Array<string>;
  /**
   * The PO Box of the booking holder or the ticket holder.
   */
  postalCode?: string;
  /**
   * The country of the booking holder or the ticket holder.
   */
  country?: string;
  /**
   * Optional notes for the booking.
   */
  notes?: string | null;
};

export type BookingPricing = {
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Pricing;
};

export type BookingReservationBody = {
  /**
   * A unique UUID to identify the booking. Setting this value acts like an idempotency key preventing you from double booking.
   */
  uuid?: string;
  /**
   * The product ID for this booking.
   */
  productId: string;
  /**
   * The option ID for this booking.
   */
  optionId: string;
  /**
   * The availability ID for the selected timeslot.
   */
  availabilityId?: string;
  /**
   * How many minutes to reserve the availability, otherwise defaults to the supplier default amount.
   */
  expirationMinutes?: number;
  /**
   * Optional notes for the booking.
   */
  notes?: string | null;
  /**
   * An list of unit items that will be included in the booking.
   */
  unitItems: Array<BookingUnitItem>;
  /**
   * Your reference for this booking. Also known as a Voucher Number.
   */
  resellerReference?: string;
  /**
   * Contact details for the main guest who will attend the tour/attraction. Contact BODY can be applied to both the booking object (the main reservation) or the unit object (individual ticket holders - if the supplier requires this information).
   */
  contact?: BookingContact;
  /**
   * Can be used only when pricing capability is used.
   */
  currency?: string | null;
};

export type BookingReservationPricingBody = {
  /**
   * Can be used only when pricing capability is used.
   */
  currency?: string | null;
};

export type BookingReservationRequest = {
  body: BookingReservationBody;
};

export enum BookingStatus {
  ON_HOLD = 'ON_HOLD',
  CONFIRMED = 'CONFIRMED',
  EXPIRED = 'EXPIRED',
  CANCELLED = 'CANCELLED',
  REDEEMED = 'REDEEMED',
  PENDING = 'PENDING',
  REJECTED = 'REJECTED',
}

export type BookingUnitItem = {
  /**
   * The unit item unit ID.
   */
  uuid?: string;
  /**
   * A unique UUID to identify the unit, same as the booking uuid except per unit.
   */
  unitId: string;
  resellerReference?: string;
  contact?: BookingContact;
};

export type BookingUpdateBody = {
  /**
   * Your reference for this booking. Also known as a Voucher Number.
   */
  resellerReference?: string;
  /**
   * The product ID.
   */
  productId?: string;
  /**
   * The option id.
   */
  optionId?: string;
  /**
   * The availability ID for the selected timeslot.
   */
  availabilityId?: string;
  /**
   * How many minutes to reserve the availability, otherwise defaults to the supplier default amount.
   */
  expirationMinutes?: number;
  /**
   * Optional notes for the booking.
   */
  notes?: string | null;
  /**
   * Whether you want OCTO Cloud to email the guest a copy of their receipt and tickets. (defaults to false).
   */
  emailReceipt?: boolean;
  /**
   * An array of unit items in the booking. To retain or modify existing unit items, you must include the unit item with the associated uuid, otherwise that unit item will be removed.
   */
  unitItems?: Array<BookingUnitItem>;
  /**
   * Contact details for the main guest who will attend the tour/attraction. Contact BODY can be applied to both the booking object (the main reservation) or the unit object (individual ticket holders - if the supplier requires this information).
   */
  contact?: BookingContact;
};

export type BookingUpdatePathParams = {
  /**
   * The UUID of the booking
   */
  uuid: string;
};

export type Capability = {
  /**
   * Unique identifier of the capability.
   */
  id: CapabilityId;
  /**
   * Revision number for the capability.
   */
  revision: number;
  /**
   * Whether this capability is required.
   */
  required: boolean;
  /**
   * List of dependent capability IDs.
   */
  dependencies: Array<CapabilityId>;
  /**
   * Optional documentation or description for this capability.
   */
  docs: string | null;
};

export enum CapabilityId {
  OCTO_ADJUSTMENTS = 'octo/adjustments',
  OCTO_CART = 'octo/cart',
  OCTO_CONTENT = 'octo/content',
  OCTO_MAPPINGS = 'octo/mappings',
  OCTO_PACKAGES = 'octo/packages',
  OCTO_PICKUPS = 'octo/pickups',
  OCTO_PRICING = 'octo/pricing',
  OCTO_OFFERS = 'octo/offers',
  OCTO_QUESTIONS = 'octo/questions',
  OCTO_WEBHOOKS = 'octo/webhooks',
}

export enum CategoryLabel {
  MULTI_DAY = 'multi-day',
  CITY_CARDS = 'city-cards',
  ADULTS_ONLY = 'adults-only',
  ANIMALS = 'animals',
  AUDIO_GUIDE = 'audio-guide',
  BEACHES = 'beaches',
  BIKE_TOURS = 'bike-tours',
  BOAT_TOURS = 'boat-tours',
  CLASSES = 'classes',
  DAY_TRIPS = 'day-trips',
  FAMILY_FRIENDLY = 'family-friendly',
  FAST_TRACK = 'fast-track',
  FOOD = 'food',
  GUIDED_TOURS = 'guided-tours',
  HISTORY = 'history',
  HOP_ON_HOP_OFF = 'hop-on-hop-off',
  LITERATURE = 'literature',
  LIVE_MUSIC = 'live-music',
  MUSEUMS = 'museums',
  NIGHTLIFE = 'nightlife',
  OUTDOORS = 'outdoors',
  PRIVATE_TOURS = 'private-tours',
  ROMANTIC = 'romantic',
  RECURRING_EVENTS = 'recurring-events',
  SELF_GUIDED = 'self-guided',
  SMALL_GROUP_TOURS = 'small-group-tours',
  SPORTS = 'sports',
  THEME_PARKS = 'theme-parks',
  WALKING_TOURS = 'walking-tours',
  WHEELCHAIR_ACCESSIBLE = 'wheelchair-accessible',
  ACCOMMODATION_INCLUDED = 'accommodation-included',
  TRIP_DIFFICULTY_EASY = 'trip-difficulty-easy',
  TRIP_DIFFICULTY_MEDIUM = 'trip-difficulty-medium',
  TRIP_DIFFICULTY_HARD = 'trip-difficulty-hard',
}

export type Commentary = {
  /**
   * Specifies the format in which commentary is provided. Possible values are:
   * IN_PERSON: Live commentary delivered by a guide or host during the activity. Examples include a tour guide providing real-time explanations about historical landmarks or itinerary highlights.
   * RECORDED_AUDIO: Pre-recorded audio commentary accessible during the activity. Delivered via headphones, mobile apps, or speaker systems, covering key details in multiple languages.
   * WRITTEN: Commentary provided as written material, such as printed brochures, guidebooks, or on-site informational displays at points of interest.
   * OTHER: Commentary formats not explicitly listed, such as augmented reality experiences or interactive digital guides.
   */
  format: CommentaryFormat;
  /**
   * Specifies the language in which the commentary is offered, adhering to IETF BCP 47 language tags for compatibility.
   */
  language: string;
};

export enum CommentaryFormat {
  IN_PERSON = 'IN_PERSON',
  RECORDED_AUDIO = 'RECORDED_AUDIO',
  WRITTEN = 'WRITTEN',
  OTHER = 'OTHER',
}

export type Contact = {
  /**
   * The full name of the booking holder. Can also be retrieved as an alias for the concatenation of firstName and lastName
   */
  fullName: string | null;
  /**
   * The first name of the booking holder.
   */
  firstName: string | null;
  /**
   * The last name of the booking holder.
   */
  lastName: string | null;
  /**
   * The email address of the booking holder.
   */
  emailAddress: string | null;
  /**
   * The phone number of the booking holder.
   */
  phoneNumber: string | null;
  /**
   * An array of locale values, equivalent to navigator.languages in a browsers environment; representing customer language for booking communications.
   */
  locales: Array<string>;
  /**
   * The PO Box of the booking holder or the ticket holder.
   */
  postalCode: string | null;
  /**
   * The country of the booking holder or the ticket holder.
   */
  country: string | null;
  /**
   * Customer-facing public notes for the booking.
   */
  notes: string | null;
};

export enum ContactField {
  FIRST_NAME = 'firstName',
  LAST_NAME = 'lastName',
  EMAIL_ADDRESS = 'emailAddress',
  PHONE_NUMBER = 'phoneNumber',
  COUNTRY = 'country',
  NOTES = 'notes',
  LOCALES = 'locales',
  ALLOW_MARKETING = 'allowMarketing',
  POSTAL_CODE = 'postalCode',
}

export enum DeliveryFormat {
  PDF_URL = 'PDF_URL',
  QRCODE = 'QRCODE',
  CODE128 = 'CODE128',
  PKPASS_URL = 'PKPASS_URL',
  AZTECCODE = 'AZTECCODE',
}

export enum DeliveryMethod {
  VOUCHER = 'VOUCHER',
  TICKET = 'TICKET',
}

export type DeliveryOption = {
  /**
   * The format in which vouchers for this product are delivered. Each format specifies how the vouchers will be represented:
   * QRCODE: A code presented as a QR Code, commonly used for scanning at entry points.
   * CODE128: A linear barcode format widely used for retail and ticketing purposes.
   * AZTECCODE: A two-dimensional barcode format similar to QR codes but more compact. It is optimized for small spaces and often used in transportation and event ticketing.
   * PDF_URL: A URL linking to a downloadable PDF containing the complete ticket details for this product.
   * PKPASS_URL: A URL for adding the ticket to Apple Wallet (Passbook) for easy access on iOS devices.
   * This field ensures resellers can understand and integrate the appropriate ticket delivery formats specifically associated with this product."
   */
  deliveryFormat: DeliveryFormat;
  /**
   * The string with the value of the delivery option, e.g. value behind the QRCODE, CODE128, AZTECCODE, or URL hosting the file for PDF_URL or PKPASS_URL)
   */
  deliveryValue: string;
};

export enum DurationUnit {
  MINUTE = 'minute',
  HOUR = 'hour',
  DAY = 'day',
}

export type ErrorBadRequest = BaseError;

export type ErrorForbidden = BaseError;

export type ErrorInternalServerError = BaseError;

export type ErrorInvalidAvailabilityId = BaseError & {
  /**
   * Missing or invalid `availabilityId` in the request
   */
  availabilityId: string;
};

export type ErrorInvalidBookingUuid = BaseError & {
  /**
   * Missing or invalid booking UUID, or if you're confirming the booking the booking may have expired already.
   */
  uuid: string;
};

export type ErrorInvalidOptionId = BaseError & {
  /**
   * Missing or invalid `optionId` in the request
   */
  optionId: string;
};

export type ErrorInvalidProductId = BaseError & {
  /**
   * Missing or invalid `productId` in the request
   */
  productId: string;
};

export type ErrorInvalidUnitId = BaseError & {
  /**
   * Missing or invalid `unitId` in the request
   */
  unitId: string;
};

export type ErrorUnauthorized = BaseError;

export type ErrorUnprocessableEntity = BaseError;

export type ExtendReservationBody = {
  expirationMinutes?: number;
};

export type ExtendReservationPathParams = {
  /**
   * The UUID of the booking
   */
  uuid: string;
};

export type Faq = {
  /**
   * The text of the frequently asked question. This should be a well-phrased question that reflects typical customer concerns or queries about the product (e.g., "Is hotel pickup included?", "What is the cancellation policy?"). Note: FAQs are intentionally repeated at both product and option levels, enabling suppliers to address questions specific to each context. Resellers must combine FAQs from both levels for customer presentation.
   */
  question: string;
  /**
   * The detailed response to the corresponding question. Answers should be accurate, informative, and written in a way that resolves customer uncertainty (e.g., "Yes, hotel pickup is included within a 10-mile radius of the city center.", "Cancellations are free up to 24 hours before the activity.").
   */
  answer: string;
};

export type Feature = {
  /**
   * A brief summary of a specific feature, providing quick and precise information about an aspect of the product.
   */
  shortDescription: string | null;
  /**
   * Specifies the category of the feature to ensure clear and organized communication. Each category serves a distinct purpose:
   *
   * INCLUSION: Details what is included in the product offering (e.g., "Hotel pickup included," "Lunch provided," "All equipment supplied"), emphasizing the product's completeness and value.
   * EXCLUSION: Lists what is not included (e.g., "Gratuities not included," "Admission tickets not provided"), managing customer expectations and reducing ambiguity.
   * HIGHLIGHT: Emphasizes the product's key selling points or unique aspects (e.g., "Skip-the-line access to the Eiffel Tower," "Expert-guided tour"), captivating potential customers by showcasing standout qualities.
   * PREBOOKING_INFORMATION: Contains essential details customers need to know before booking (e.g., "Not suitable for children under 3 years," "Wear sturdy footwear").
   * PREARRIVAL_INFORMATION: Offers details to prepare customers for their experience before arrival (e.g., "Arrive 15 minutes early," "Bring a printed ticket").
   * REDEMPTION_INSTRUCTION: Provides clear instructions on how to redeem the product or service (e.g., "Show your booking confirmation at the ticket counter," "Scan your QR code upon entry").
   * ACCESSIBILITY_INFORMATION: Highlights accessibility-related details (e.g., "Wheelchair accessible," "No elevators available").
   * ADDITIONAL_INFORMATION: Supplies supplementary details that add context or clarity (e.g., "Pets allowed with prior notice," "Multilingual guides available").
   * BOOKING_TERM: Describes terms related to the booking process (e.g., "Reservations must be made at least 48 hours in advance," "No changes allowed after booking").
   * CANCELLATION_TERM: Explains the terms and conditions for cancellations (e.g., "Free cancellation up to 24 hours before the start time," "Non-refundable").
   * This structured classification enhances the product's appeal, ensures transparency, and facilitates informed decision-making for resellers and customers.
   */
  type: FeatureType;
};

export enum FeatureType {
  INCLUSION = 'INCLUSION',
  EXCLUSION = 'EXCLUSION',
  HIGHLIGHT = 'HIGHLIGHT',
  PREBOOKING_INFORMATION = 'PREBOOKING_INFORMATION',
  PREARRIVAL_INFORMATION = 'PREARRIVAL_INFORMATION',
  REDEMPTION_INSTRUCTION = 'REDEMPTION_INSTRUCTION',
  ACCESSIBILITY_INFORMATION = 'ACCESSIBILITY_INFORMATION',
  ADDITIONAL_INFORMATION = 'ADDITIONAL_INFORMATION',
  BOOKING_TERM = 'BOOKING_TERM',
  CANCELLATION_TERM = 'CANCELLATION_TERM',
}

export type GetProductPathParams = {
  /**
   * The id of the product
   */
  id: string;
};

export type GetProductsRequest = {
  [key: string]: unknown;
};

export type GetSupplierRequest = {
  [key: string]: unknown;
};

/**
 * Specifies the type or source of the identifier for the location. This field defines the platform or system where the identifier is valid, allowing for seamless integration with third-party systems or mapping platforms. Common examples include:
 * googlePlaceId: A unique identifier for locations on Google Maps.
 * applePlaceId: A unique identifier for locations on Apple Maps.
 * tripadvisorLocationId: A unique identifier for listings on TripAdvisor.
 * yelpPlaceId: A unique identifier for locations on Yelp.
 * facebookPlaceId: A unique identifier for places on Facebook.
 * foursquarePlaceId: A unique identifier for venues on Foursquare.
 * baiduPlaceId: A unique identifier for locations on Baidu Maps.
 * amapPlaceId: A unique identifier for locations on Amap (China-based mapping platform).
 */
export type Identifiers = {
  googlePlaceId: string | null;
  applePlaceId: string | null;
  tripadvisorLocationId: string | null;
  yelpPlaceId: string | null;
  facebookPlaceId: string | null;
  foursquarePlaceId: string | null;
  baiduPlaceId: string | null;
  amapPlaceId: string | null;
};

export type ListCapabilitiesRequest = {
  [key: string]: unknown;
};

export type ListCapabilitiesRequestHeaders = {
  [key: string]: unknown;
};

export type Location = {
  /**
   * The name of the location, providing a recognizable identifier for customers (e.g., "Statue of Liberty"). This field can be null if no name is available.
   */
  title: string | null;
  /**
   * A brief description of the location, summarizing its significance or role in the product (e.g., "Historic landmark and popular tourist destination"). This field can be null if no description is provided.
   */
  shortDescription: string | null;
  /**
   * Specifies the roles or purposes of the location within the product. START: The starting point or meeting location for the product or experience. This is where customers are expected to gather before the activity begins.
   * REDEMPTION: A location where customers must go to exchange tickets, collect passes, or redeem vouchers before proceeding to the starting point or experience (if applicable).
   * ITINERARY_ITEM: A designated stop or location within the itinerary, typically where customers pause or spend time during a moving tour or activity.
   * POINT_OF_INTEREST: A notable location or attraction that customers may see or pass by without stopping. Generally used for sightseeing locations.
   * ADMISSION_INCLUDED: A location where entry is included in the product price, often highlighting an attraction or event that customers can access as part of the experience.
   * END: The final point or drop-off location where the activity concludes.
   */
  types: Array<LocationType>;
  /**
   * The travel time, in minutes, needed to reach this location from the previous one in the itinerary. Useful for building schedules or itineraries. Set to null if travel time is unknown, not relevant, or not required.
   */
  minutesTo: number | null;
  /**
   * The approximate duration, in minutes, spent at this location. Helps provide clarity on the itinerary or scheduling details. Set to null if the time spent is flexible, unknown, or not applicable.
   */
  minutesAt: number | null;
  /**
   * An object containing detailed geospatial and postal address data for the location.
   */
  place: Place;
};

export enum LocationType {
  START = 'START',
  ITINERARY_ITEM = 'ITINERARY_ITEM',
  POINT_OF_INTEREST = 'POINT_OF_INTEREST',
  ADMISSION_INCLUDED = 'ADMISSION_INCLUDED',
  END = 'END',
  REDEMPTION = 'REDEMPTION',
}

export type Media = {
  /**
   * The URL of the media file. The URL must be stable and publicly accessible.
   */
  src: string;
  /**
   * Specifies the type of the media file, which indicates its format and intended usage. Recommended types include: image/jpeg: High-quality compressed images, ideal for general use. Suggested dimensions: 1920x1080 or higher.
   * image/png: Images with transparency or higher visual fidelity, recommended for logos. Suggested dimensions: At least 1000x1000 pixels.
   * video/mp4: Universal video format for high-quality playback. Suggested resolution: 1080p or higher.
   * video/avi: A less common video format; MP4 is generally preferred for compatibility.
   * external/youtube: URL links to YouTube videos for dynamic content. Use a shareable URL format.
   * external/vimeo: URL links to Vimeo-hosted videos for high-quality or private video content.
   */
  type: MediaType;
  /**
   * Defines the relationship of the media file to the supplier's content. Common values include: LOGO: For branding assets like supplier logos.
   * COVER: For primary visual elements representing the supplier.
   * GALLERY: For additional images or videos.
   */
  rel: MediaRel;
  /**
   * The title or name of the media, providing a brief description or identifier for the media file. This helps in organizing and identifying media files (e.g., "Main Attraction Image," "Promotional Video"). This field can be null if no title is provided.
   */
  title: string | null;
  /**
   * A caption providing additional context or information about what is depicted in the media. Captions should be customer-facing and provide insights such as "Overview of the city skyline at sunset" or "Guests enjoying the guided tour." This field can be null if no caption is provided.
   */
  caption: string | null;
  /**
   * Information about the copyright status or usage restrictions of the media. This may include details about ownership, licensing terms, or attribution requirements (e.g., "© 2024 Example Corp, All Rights Reserved"). If null, it is assumed there are no copyright restrictions or attribution requirements.
   */
  copyright: string | null;
};

export enum MediaRel {
  LOGO = 'LOGO',
  COVER = 'COVER',
  GALLERY = 'GALLERY',
}

export enum MediaType {
  IMAGE_JPEG = 'image/jpeg',
  IMAGE_PNG = 'image/png',
  VIDEO_MP4 = 'video/mp4',
  VIDEO_AVI = 'video/avi',
  EXTERNAL_YOUTUBE = 'external/youtube',
  EXTERNAL_VIMEO = 'external/vimeo',
}

/**
 * Defines the opening hours for this availability, even for start time-based availability. Supports multiple periods for breaks in the day.
 */
export type OpeningHours = {
  /**
   * The opening time
   */
  from: string;
  /**
   * The closing time
   */
  to: string;
};

export type Option = {
  /**
   * A unique identifier for the option within the product. This ID is critical for identifying specific options during bookings or other API interactions.
   */
  id: string;
  /**
   * Indicates whether the option is the default selection.
   * true: This option should be rendered and selected first in customer-facing interfaces.
   * false: The option is not default and requires manual selection.
   */
  default: boolean;
  /**
   * The internal name used by the supplier to refer to the option. This name is for internal or operational purposes and may differ from the public, customer-facing name. The customer-facing name is defined separately in the title field under the octo/content capability.
   */
  internalName: string;
  /**
   * An optional internal code used by the supplier to refer to the product. This field is useful for supplier-specific workflows or cross-referencing. It can be null if no reference code exists for the product.
   */
  reference: string | null;
  /**
   * An array containing all possible start times for the option that can be returned during availability. For example a tour with multiple departure times may have multiple:["09:00", "14:00", "17:00"].
   */
  availabilityLocalStartTimes: Array<string>;
  /**
   * A text description of the option's cancellation policy, providing clear guidelines to customers.
   */
  cancellationCutoff: string;
  /**
   * The numeric value of the cutoff period for cancellations, relative to start time or closing hour (of opening hours product)
   */
  cancellationCutoffAmount: number;
  /**
   * The time unit associated with the cutoff period. Possible values are:
   * hour: Cutoff is measured in hours.
   * minute: Cutoff is measured in minutes.
   * day: Cutoff is measured in days.
   */
  cancellationCutoffUnit: DurationUnit;
  /**
   * An array specifying the contact fields required to confirm a booking. These apply to the lead traveler, not individual tickets. Possible values:
   * firstName: The first name of the traveler.
   * lastName: The last name of the traveler.
   * fullName: The full name of the traveler.
   * emailAddress: The email address of the traveler.
   * phoneNumber: The phone number of the traveler.
   * postalCode: The postal code of the traveler.
   * country: The country of the traveler.
   * notes: Optional notes from the traveler.
   * locales: Preferred language/localization preferences.
   */
  requiredContactFields: Array<ContactField>;
  /**
   * Specifies the limitations on booking the option.
   */
  restrictions: OptionRestrictions;
  /**
   * The list array of all units (ticket types) available for this product. Each unit represents a specific type of ticket (e.g., Adult, Child). See Unit for a detailed on the object.
   */
  units: Array<Unit>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricingFrom?: Array<Pricing>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Array<Pricing>;
  /**
   * The public, customer-facing name of the product. This name is displayed to end customers and should accurately represent the product for marketing and sales purposes
   */
  title?: string;
  /**
   * A brief, customer-facing description of the product. This field provides a concise overview of the product and can be null if no description is available.
   */
  shortDescription?: string | null;
  /**
   * A detailed description of the product, offering in-depth information about it and relevant details. This field can be null if extended details are not provided.
   */
  description?: string | null;
  /**
   * An array of structured objects describing various aspects of the product's features, grouped into clear categories. These include details about what is included, excluded, emphasized, essential, or safety-related, ensuring transparency and enhancing the product’s appeal to customers. Note: Features are intentionally repeated at both product and option levels, allowing suppliers to specify details where most applicable. Resellers must combine information from both levels for a comprehensive customer view.
   */
  features?: Array<Feature>;
  /**
   * An array containing frequently asked questions (FAQs) related to the product. This field is designed to address common customer inquiries by providing clear and concise answers, enhancing the customer experience and reducing potential confusion. Each object represents a single question and its corresponding answer. Note: FAQs are intentionally repeated at both product and option levels, enabling suppliers to address questions specific to each context. Resellers must combine FAQs from both levels for customer presentation.
   */
  faqs?: Array<Faq>;
  /**
   * A list of media files hosted at stable URLs. Media enhances the visual and informational representation of the product, supporting images, videos, or documents.
   * Note: Media details are intentionally repeated at both product and option levels. Suppliers should use the level most relevant for the resource. Resellers must merge media information for customer presentation.
   */
  media?: Array<Media>;
  /**
   * A list of geographical locations associated with the product. These locations can represent an itinerary where the order of locations matters, such as for tours or experiences, or simply a list of related locations linked to the product. This field is particularly useful for map-dependent reseller platforms, as it provides geographic and contextual details to enhance customer understanding and platform integration. Each object in the array represents a single related location and includes the following fields:
   */
  locations?: Array<Location>;
  /**
   * A list of labels representing the categories applicable to the product or experience. These categories help customers quickly understand the nature, format, or features of the product. The predefined category labels are based on Google's Product Categories for Things to Do, ensuring alignment with industry standards. OCTO has also added custom categories to cover additional popular offerings. OCTO welcomes suggestions for additional categories to ensure consistency and better coverage. Please contact the team to propose updates to the specification.
   */
  categoryLabels?: Array<CategoryLabel>;
  /**
   * Indicates the duration of the product or experience in minutes. If the duration is flexible, this represents the typical minimum duration.
   */
  durationMinutesFrom?: number;
  /**
   * If a number: Represents the maximum in flexible duration of the product or experience in minutes, defining a range.
   * If null: Indicates that the duration is exact and matches the value of durationMinutesFrom.
   */
  durationMinutesTo?: number | null;
  /**
   * A list of commentary options available for the product. Each object in the array specifies the format and language of the commentary.
   */
  commentary?: Array<Commentary>;
};

export type OptionContent = {
  /**
   * The public, customer-facing name of the product. This name is displayed to end customers and should accurately represent the product for marketing and sales purposes
   */
  title?: string;
  /**
   * A brief, customer-facing description of the product. This field provides a concise overview of the product and can be null if no description is available.
   */
  shortDescription?: string | null;
  /**
   * A detailed description of the product, offering in-depth information about it and relevant details. This field can be null if extended details are not provided.
   */
  description?: string | null;
  /**
   * An array of structured objects describing various aspects of the product's features, grouped into clear categories. These include details about what is included, excluded, emphasized, essential, or safety-related, ensuring transparency and enhancing the product’s appeal to customers. Note: Features are intentionally repeated at both product and option levels, allowing suppliers to specify details where most applicable. Resellers must combine information from both levels for a comprehensive customer view.
   */
  features?: Array<Feature>;
  /**
   * An array containing frequently asked questions (FAQs) related to the product. This field is designed to address common customer inquiries by providing clear and concise answers, enhancing the customer experience and reducing potential confusion. Each object represents a single question and its corresponding answer. Note: FAQs are intentionally repeated at both product and option levels, enabling suppliers to address questions specific to each context. Resellers must combine FAQs from both levels for customer presentation.
   */
  faqs?: Array<Faq>;
  /**
   * A list of media files hosted at stable URLs. Media enhances the visual and informational representation of the product, supporting images, videos, or documents.
   * Note: Media details are intentionally repeated at both product and option levels. Suppliers should use the level most relevant for the resource. Resellers must merge media information for customer presentation.
   */
  media?: Array<Media>;
  /**
   * A list of geographical locations associated with the product. These locations can represent an itinerary where the order of locations matters, such as for tours or experiences, or simply a list of related locations linked to the product. This field is particularly useful for map-dependent reseller platforms, as it provides geographic and contextual details to enhance customer understanding and platform integration. Each object in the array represents a single related location and includes the following fields:
   */
  locations?: Array<Location>;
  /**
   * A list of labels representing the categories applicable to the product or experience. These categories help customers quickly understand the nature, format, or features of the product. The predefined category labels are based on Google's Product Categories for Things to Do, ensuring alignment with industry standards. OCTO has also added custom categories to cover additional popular offerings. OCTO welcomes suggestions for additional categories to ensure consistency and better coverage. Please contact the team to propose updates to the specification.
   */
  categoryLabels?: Array<CategoryLabel>;
  /**
   * Indicates the duration of the product or experience in minutes. If the duration is flexible, this represents the typical minimum duration.
   */
  durationMinutesFrom?: number;
  /**
   * If a number: Represents the maximum in flexible duration of the product or experience in minutes, defining a range.
   * If null: Indicates that the duration is exact and matches the value of durationMinutesFrom.
   */
  durationMinutesTo?: number | null;
  /**
   * A list of commentary options available for the product. Each object in the array specifies the format and language of the commentary.
   */
  commentary?: Array<Commentary>;
};

export type OptionPricing = {
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricingFrom?: Array<Pricing>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Array<Pricing>;
};

export type OptionRestrictions = {
  /**
   * The minimum number of units (tickets) that can be purchased in a single booking. A null value indicates no minimum.
   */
  minUnits: number | null;
  /**
   * The maximum number of units (tickets) that can be purchased in a single booking. A null value indicates no maximum.
   */
  maxUnits: number | null;
};

export type Place = {
  /**
   * The latitude of the location, expressed in decimal degrees. Negative values represent southern latitudes.
   */
  latitude: number;
  /**
   * The longitude of the location, expressed in decimal degrees. Negative values represent western longitudes.
   */
  longitude: number;
  /**
   * Structured postal address details for the location.
   */
  postalAddress: PostalAddress;
  /**
   * A list of unique identifiers from third-party platforms (e.g., Google Maps, Yelp, Tripadvisor).
   */
  identifiers: Identifiers;
  /**
   * A list of URLs pointing to web pages or social media profiles for the location.
   */
  sameAs: Array<string>;
};

export type PostalAddress = {
  /**
   * The primary address line, such as a street address, P.O. box, or company name. Null if not provided.
   */
  streetAddress: string | null;
  /**
   * The city or locality associated with the address.
   */
  addressLocality: string | null;
  /**
   * The state, province, or region associated with the address.
   */
  addressRegion: string | null;
  /**
   * The postal code or ZIP code for the address.
   */
  postalCode: string | null;
  /**
   * The postal code or ZIP code for the address.
   */
  addressCountry: string | null;
  /**
   * The post office box number associated with the address, if applicable.
   */
  postOfficeBoxNumber: string | null;
};

export type Pricing = {
  /**
   * Represents the advertised marketing price, which must be equal to or higher than pricingFrom.retail. Typically used for strike-through pricing, it highlights the original or component-based value of the product when the retail price reflects a discount or bundled offer. For example, a package product combining multiple components (e.g., hotel + tour + meals) may have a total component value of $500 (original), while the bundled retail price is $400. In such cases, the original price is displayed to show savings.This field should only be shown when it is higher than pricingFrom.retail and must accurately reflect a valid reference price, ensuring transparency and trust.
   */
  original: number;
  /**
   * The supplier’s recommended sale price, including all taxes and fees. This is the price charged to end customers and represents the total cost.
   */
  retail: number;
  /**
   * The wholesale price charged to the reseller, including all taxes and fees. This price reflects the amount the reseller pays to the supplier.
   */
  net: number | null;
  /**
   * Specifies the currency used for the prices provided in the pricingFrom object. The value must adhere to ISO 4217 currency codes (e.g., USD, EUR, JPY) to ensure consistency across systems.
   */
  currency: string;
  /**
   * All pricing is given in integers to avoid floating point rounding issues. e.g. USD = 2 and JPY = 0. To convert a price to decimal you should do: price / (10 ** currencyPrecision) where ** is to the power of e.g. Math.pow(10, currencyPrecision).
   */
  currencyPrecision: number;
  /**
   * This field defines the number of decimal places used for the currency in the pricingFrom object, ensuring precise representation and preventing rounding errors during calculations. For example, in currencies like USD, which have a precision of 2, prices are expressed in cents (e.g., $45.00 is represented as 4500). In currencies like JPY, which have a precision of 0, prices are expressed as whole yen amounts (e.g., ¥4500 is represented as 4500). By aligning with the specific decimal requirements of different currencies, this field guarantees accurate pricing calculations and consistent handling across various currency formats.
   */
  includedTaxes: Array<Tax>;
};

export enum PricingPer {
  BOOKING = 'BOOKING',
  UNIT = 'UNIT',
}

export type PricingUnit = Pricing & {
  /**
   * ID of the unit this pricing is related to
   */
  unitId: string;
};

export type Product = {
  /**
   * The unique identifier for the product, used across the platform to check availability, create bookings, etc. This identifier must be unique within the scope of the supplier’s system to ensure accurate referencing and operations.
   */
  id: string;
  /**
   * The internal name used by the supplier to refer to the product. This name is for internal or operational purposes and may differ from the public, customer-facing name. The customer-facing name is defined separately in the title field under the octo/content capability.
   */
  internalName: string;
  /**
   * An optional internal code used by the supplier to refer to the product. This field is useful for supplier-specific workflows or cross-referencing. It can be null if no reference code exists for the product.
   */
  reference: string | null;
  /**
   * The language code specifying the primary language in which the product operates. It must conform to the IETF BCP 47 standard, which defines language tags for localization (e.g., en-US for American English, fr-FR for French (France), es-ES for Spanish (Spain)).
   */
  locale: string;
  /**
   * The IANA Time Zone identifier indicating the product's location (e.g., America/New_York, Europe/London).
   */
  timeZone?: string;
  /**
   * Indicates whether an availabilityId is required when creating a booking. If set to false, bookings can be made without specifying a travel date, creating open-dated bookings.
   */
  allowFreesale: boolean;
  /**
   * Indicates whether the customer’s tickets or vouchers are delivered immediately after the booking is confirmed. If false, resellers must manage delayed ticket delivery processes.
   */
  instantConfirmation: boolean;
  /**
   * This indicates whether the Reseller can expect immediate delivery of the customer's tickets. If `false` then the Reseller MUST be able to delay delivery of the tickets to the customer.
   */
  instantDelivery: boolean;
  /**
   * Indicates whether an availabilityId is required when creating a booking. If set to false, bookings can be made without specifying a travel date, creating open-dated bookings.
   */
  availabilityRequired: boolean;
  /**
   * Specifies the type of availability for the product:
   * START_TIME: For products with fixed departure times (e.g., walking tour at set times during the day).
   * OPENING_HOURS: For products where customers select a date and can visit anytime during operating hours (e.g., museums general admission ticket valid at any time when museum is open).
   */
  availabilityType: AvailabilityType;
  /**
   * Lists the formats in which tickets or vouchers for this product are delivered. Each format specifies how the tickets or vouchers will be represented:
   * QRCODE: A code presented as a QR Code, commonly used for scanning at entry points.
   * CODE128: A linear barcode format widely used for retail and ticketing purposes.
   * AZTECCODE: A two-dimensional barcode format similar to QR codes but more compact. It is optimized for small spaces and often used in transportation and event ticketing.
   * PDF_URL: A URL linking to a downloadable PDF containing the complete ticket details for this product.
   * PKPASS_URL: A URL for adding the ticket to Apple Wallet (Passbook) for easy access on iOS devices.
   * This field ensures resellers can understand and integrate the appropriate ticket delivery formats specifically associated with this product.
   */
  deliveryFormats: Array<DeliveryFormat>;
  /**
   * Specifies all supported methods of how tickets or vouchers for this product are delivered in the booking response:
   * TICKET: Delivered individually per unit in the booking, where each person or unit receives a separate ticket.
   * VOUCHER: Delivered as a single voucher for the entire booking, consolidating all units under one document.
   * This field ensures clarity on the format of ticket or voucher delivery to resellers and customers.
   */
  deliveryMethods: Array<DeliveryMethod>;
  /**
   * Specifies how the product can be redeemed by the customer:
   * DIGITAL: The ticket or voucher must be presented, either scanned from a digital device (e.g., smartphone) or as a printed copy. Redemption requires a valid voucher or ticket, even in digital form.
   * MANIFEST: The customer’s name, reference, or other information is checked against a manifest by the supplier. Redemption does not require a ticket or voucher.
   * PRINT: A physical printed ticket or voucher is strictly required for redemption and must be presented at the time of use.
   * This field ensures resellers and customers understand the specific requirements for redeeming this product.
   */
  redemptionMethod: RedemptionMethod;
  /**
   * The list array of all options (variations of the product). Each product must have at lest one option. See Option for a detailed on the object.
   */
  options: Array<Option>;
  /**
   * Is on the object when Pricing capability is requested. Default currency for this product, if you omit the currency parameter on future endpoints this is the value the reservation system will fallback to.
   */
  defaultCurrency?: string;
  /**
   * Is on the object when Pricing capability is requested. All the possible currencies that we accept for this product.
   */
  availableCurrencies?: Array<string>;
  /**
   * Is on the object when Pricing capability is requested. Indicates whether the pricing is per unit (most common), or per booking. Pricing which is per booking is common for private charters or group booking products where the price is the same regardless of how many tickets are purchased.
   */
  pricingPer?: PricingPer;
  /**
   * The public, customer-facing name of the product. This name is displayed to end customers and should accurately represent the product for marketing and sales purposes
   */
  title?: string;
  /**
   * A brief, customer-facing description of the product. This field provides a concise overview of the product and can be null if no description is available.
   */
  shortDescription?: string | null;
  /**
   * A detailed description of the product, offering in-depth information about it and relevant details. This field can be null if extended details are not provided.
   */
  description?: string | null;
  /**
   * An array of structured objects describing various aspects of the product's features, grouped into clear categories. These include details about what is included, excluded, emphasized, essential, or safety-related, ensuring transparency and enhancing the product’s appeal to customers. Note: Features are intentionally repeated at both product and option levels, allowing suppliers to specify details where most applicable. Resellers must combine information from both levels for a comprehensive customer view.
   */
  features?: Array<Feature>;
  /**
   * An array containing frequently asked questions (FAQs) related to the product. This field is designed to address common customer inquiries by providing clear and concise answers, enhancing the customer experience and reducing potential confusion. Each object represents a single question and its corresponding answer. Note: FAQs are intentionally repeated at both product and option levels, enabling suppliers to address questions specific to each context. Resellers must combine FAQs from both levels for customer presentation.
   */
  faqs?: Array<Faq>;
  /**
   * A list of media files hosted at stable URLs. Media enhances the visual and informational representation of the product, supporting images, videos, or documents.
   * Note: Media details are intentionally repeated at both product and option levels. Suppliers should use the level most relevant for the resource. Resellers must merge media information for customer presentation.
   */
  media?: Array<Media>;
  /**
   * A list of geographical locations associated with the product. These locations can represent an itinerary where the order of locations matters, such as for tours or experiences, or simply a list of related locations linked to the product. This field is particularly useful for map-dependent reseller platforms, as it provides geographic and contextual details to enhance customer understanding and platform integration. Each object in the array represents a single related location and includes the following fields:
   */
  locations?: Array<Location>;
  /**
   * A list of labels representing the categories applicable to the product or experience. These categories help customers quickly understand the nature, format, or features of the product. The predefined category labels are based on Google's Product Categories for Things to Do, ensuring alignment with industry standards. OCTO has also added custom categories to cover additional popular offerings. OCTO welcomes suggestions for additional categories to ensure consistency and better coverage. Please contact the team to propose updates to the specification.
   */
  categoryLabels?: Array<CategoryLabel>;
  /**
   * Indicates the duration of the product or experience in minutes. If the duration is flexible, this represents the typical minimum duration.
   */
  durationMinutesFrom?: number;
  /**
   * If a number: Represents the maximum in flexible duration of the product or experience in minutes, defining a range.
   * If null: Indicates that the duration is exact and matches the value of durationMinutesFrom.
   */
  durationMinutesTo?: number | null;
  /**
   * A list of commentary options available for the product. Each object in the array specifies the format and language of the commentary.
   */
  commentary?: Array<Commentary>;
};

export type ProductContent = {
  /**
   * The public, customer-facing name of the product. This name is displayed to end customers and should accurately represent the product for marketing and sales purposes
   */
  title?: string;
  /**
   * A brief, customer-facing description of the product. This field provides a concise overview of the product and can be null if no description is available.
   */
  shortDescription?: string | null;
  /**
   * A detailed description of the product, offering in-depth information about it and relevant details. This field can be null if extended details are not provided.
   */
  description?: string | null;
  /**
   * An array of structured objects describing various aspects of the product's features, grouped into clear categories. These include details about what is included, excluded, emphasized, essential, or safety-related, ensuring transparency and enhancing the product’s appeal to customers. Note: Features are intentionally repeated at both product and option levels, allowing suppliers to specify details where most applicable. Resellers must combine information from both levels for a comprehensive customer view.
   */
  features?: Array<Feature>;
  /**
   * An array containing frequently asked questions (FAQs) related to the product. This field is designed to address common customer inquiries by providing clear and concise answers, enhancing the customer experience and reducing potential confusion. Each object represents a single question and its corresponding answer. Note: FAQs are intentionally repeated at both product and option levels, enabling suppliers to address questions specific to each context. Resellers must combine FAQs from both levels for customer presentation.
   */
  faqs?: Array<Faq>;
  /**
   * A list of media files hosted at stable URLs. Media enhances the visual and informational representation of the product, supporting images, videos, or documents.
   * Note: Media details are intentionally repeated at both product and option levels. Suppliers should use the level most relevant for the resource. Resellers must merge media information for customer presentation.
   */
  media?: Array<Media>;
  /**
   * A list of geographical locations associated with the product. These locations can represent an itinerary where the order of locations matters, such as for tours or experiences, or simply a list of related locations linked to the product. This field is particularly useful for map-dependent reseller platforms, as it provides geographic and contextual details to enhance customer understanding and platform integration. Each object in the array represents a single related location and includes the following fields:
   */
  locations?: Array<Location>;
  /**
   * A list of labels representing the categories applicable to the product or experience. These categories help customers quickly understand the nature, format, or features of the product. The predefined category labels are based on Google's Product Categories for Things to Do, ensuring alignment with industry standards. OCTO has also added custom categories to cover additional popular offerings. OCTO welcomes suggestions for additional categories to ensure consistency and better coverage. Please contact the team to propose updates to the specification.
   */
  categoryLabels?: Array<CategoryLabel>;
  /**
   * Indicates the duration of the product or experience in minutes. If the duration is flexible, this represents the typical minimum duration.
   */
  durationMinutesFrom?: number;
  /**
   * If a number: Represents the maximum in flexible duration of the product or experience in minutes, defining a range.
   * If null: Indicates that the duration is exact and matches the value of durationMinutesFrom.
   */
  durationMinutesTo?: number | null;
  /**
   * A list of commentary options available for the product. Each object in the array specifies the format and language of the commentary.
   */
  commentary?: Array<Commentary>;
};

export type ProductPricing = {
  /**
   * Is on the object when Pricing capability is requested. Default currency for this product, if you omit the currency parameter on future endpoints this is the value the reservation system will fallback to.
   */
  defaultCurrency?: string;
  /**
   * Is on the object when Pricing capability is requested. All the possible currencies that we accept for this product.
   */
  availableCurrencies?: Array<string>;
  /**
   * Is on the object when Pricing capability is requested. Indicates whether the pricing is per unit (most common), or per booking. Pricing which is per booking is common for private charters or group booking products where the price is the same regardless of how many tickets are purchased.
   */
  pricingPer?: PricingPer;
};

export enum RedemptionMethod {
  DIGITAL = 'DIGITAL',
  PRINT = 'PRINT',
  MANIFEST = 'MANIFEST',
}

export enum Refund {
  FULL = 'FULL',
  PARTIAL = 'PARTIAL',
  NONE = 'NONE',
}

export type ResponseHeaders = {
  [key: string]: unknown;
};

export type ResponseHeadersContent = {
  [key: string]: unknown;
};

export type RestrictionsContent = {
  /**
   * Minimum height required for this unit (e.g., for amusement park rides).
   */
  minHeight?: number;
  /**
   * Maximum height allowed.
   */
  maxHeight?: number;
  /**
   * Unit of height measurement (e.g., "cm" or "in") used for values of minHeight, maxHeight.
   */
  heightUnit?: string;
  /**
   * Minimum weight required.
   */
  minWeight?: number;
  /**
   * Maximum weight allowed.
   */
  maxWeight?: number;
  /**
   * Unit of weight measurement (e.g., "kg" or "lb") used for values of minWeight, maxWeight.
   */
  weightUnit?: string;
};

export type Supplier = {
  /**
   * Unique identifier for the supplier, used across the platform to represent this supplier entity. This identifier must be unique within the supplier system.
   */
  id: string;
  /**
   * Name used to identify the supplier within the platform. This name is typically recognized by end customers as the official name of the supplier's business entity. It should clearly represent the supplier's brand or identity to ensure consistency across platforms. For larger multi-venue suppliers, this represents the parent entity's name. Other associated entities or sub-divisions can be specified using the octo/content capability through the venues field.
   */
  name: string;
  /**
   * The base URL that is prepended to all other API paths. The value should not contain a trailing slash and must follow URI format.
   */
  endpoint: string;
  /**
   * A structured object containing defined contact fields related to the supplier. This includes various communication methods (e.g., website, email, phone) and address information. It ensures standardized contact details that facilitate seamless communication with the supplier for both customers and partners.
   */
  contact: SupplierContact;
  /**
   * A brief, customer-facing description of the supplier. This field provides a concise overview of the supplier's business and may be null if no description is available.
   */
  shortDescription?: string | null;
  /**
   * A list of supplier media files hosted at stable URLs. Media enhances the visual and informational representation of the supplier, such as logos and supporting images. This array can be null if no media is available. Note: Media details are intentionally repeated at various levels.
   */
  media?: Array<Media>;
};

export type SupplierContact = {
  /**
   * The supplier's official website URL. This should link directly to the supplier's primary website or a dedicated page about the supplier within a supplier system. The URL should not reference a general supplier system but a specific, identifiable supplier presence. This field can be null if no website is available.
   */
  website: string | null;
  /**
   * The email address for customer service inquiries, primarily for end customers. This should be a direct and monitored email address for resolving queries and providing support. The field may be null if email support is not offered or the email address is unavailable or not provided in supplier system.
   */
  email: string | null;
  /**
   * The customer service telephone number for end customers, formatted according to the E.164 standard. This format includes the country code followed by the national number, with no spaces, dashes, or special characters. This field can be null if telephone support is unavailable or not provided in supplier system.
   */
  telephone: string | null;
  /**
   * The full mailing address of the location as a single string. It includes street address, city, state, postal code, and country. If no address is provided, this field can be null. For structured details, use the additional address-related fields
   */
  address: string | null;
};

export type SupplierContent = {
  /**
   * A brief, customer-facing description of the supplier. This field provides a concise overview of the supplier's business and may be null if no description is available.
   */
  shortDescription?: string | null;
  /**
   * A list of supplier media files hosted at stable URLs. Media enhances the visual and informational representation of the supplier, such as logos and supporting images. This array can be null if no media is available. Note: Media details are intentionally repeated at various levels.
   */
  media?: Array<Media>;
};

export type Tax = {
  /**
   * The name of the tax or fee, such as "VAT", "City Tax", or "Service Charge". This field provides clear labeling of the tax or fee being applied, making the pricing structure easier to interpret.
   */
  name: string;
  /**
   * The value of the tax or fee included in the retail price, expressed in the same currency as the pricingFrom.currency. This value indicates the portion of the end-customer price attributable to the specific tax or fee.
   */
  retail: number;
  original: number;
  /**
   * The value of the tax or fee included in the net price, expressed in the same currency as the pricingFrom.currency. This value indicates the portion of the reseller’s cost attributable to the specific tax or fee.
   */
  net: number | null;
};

export type Ticket = {
  /**
   * Specifies how the voucher can be redeemed by the customer:
   * DIGITAL: The voucher must be presented, either scanned from a digital device (e.g., smartphone) or as a printed copy. Redemption requires a valid voucher or ticket, even in digital form.
   * MANIFEST: The customer’s name, reference, or other information is checked against a manifest by the supplier. Redemption does not require a ticket or voucher.
   * PRINT: A physical printed voucher is strictly required for redemption and must be presented at the time of use.
   * This field ensures resellers and customers understand the specific requirements for redeeming this booking.
   */
  redemptionMethod: RedemptionMethod;
  /**
   * An ISO8601 date time in UTC at when the voucher was redeemed, if applicable.
   */
  utcRedeemedAt: string | null;
  /**
   * All possible delivery options supplier accepts, in the order of supplier preference
   */
  deliveryOptions: Array<DeliveryOption>;
};

export type Unit = {
  /**
   * The unique identifier for this unit within the scope of the option. This ID ensures that each unit can be uniquely referenced and managed.
   */
  id: string;
  /**
   * An internal name for the unit, used for backend purposes and not visible to customers. This field helps with identifying and managing the unit in the supplier’s system.
   */
  internalName: string;
  /**
   * An optional internal reference code used by the supplier for identification purposes. This field may not be unique and is meant for operational use.
   */
  reference: string | null;
  /**
   * This is the base unit type for this unit definition. A value of TRAVELLER must only be used in replacement of ADULT, CHILD, INFANT, YOUTH, STUDENT, MILITARY or SENIOR.
   */
  type: UnitType;
  /**
   * Specifies booking or usage restrictions for the unit.
   */
  restrictions: UnitRestrictions;
  /**
   * Lists the contact information required per ticket for the unit. Possible values include:
   * firstName: First name of the ticket holder.
   * lastName: Last name of the ticket holder.
   * fullName: Full name, as a combination of first and last name.
   * emailAddress: Email address of the ticket holder.
   * phoneNumber: Phone number of the ticket holder.
   * postalCode: Postal code for identification purposes.
   * country: Country code (ISO 3166-1 alpha-2).
   * notes: Additional notes or special instructions.
   * locales: Locale preferences (IETF BCP 47 tags).
   */
  requiredContactFields: Array<ContactField>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricingFrom?: Array<Pricing>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Array<Pricing>;
  /**
   * The public-facing name of the unit, designed to be displayed to customers. This should clearly convey the nature of the unit, such as "Adult" or "Student".
   */
  title?: string | null;
  /**
   * A concise summary of the unit, offering key details to customers. This helps in differentiating units and highlighting important characteristics.
   */
  shortDescription?: string;
  /**
   * An array of structured objects describing various aspects of the unit's features, grouped into clear categories. These include details about what is included, excluded, emphasized, essential, or safety-related, ensuring transparency and enhancing the option’s appeal to customers. Note: Features are intentionally repeated at both product and option levels, allowing suppliers to specify details where most applicable. Resellers must combine information from both levels for a comprehensive customer view.
   */
  features?: Array<Feature>;
};

export type UnitContent = {
  /**
   * The public-facing name of the unit, designed to be displayed to customers. This should clearly convey the nature of the unit, such as "Adult" or "Student".
   */
  title?: string | null;
  /**
   * A concise summary of the unit, offering key details to customers. This helps in differentiating units and highlighting important characteristics.
   */
  shortDescription?: string;
  /**
   * An array of structured objects describing various aspects of the unit's features, grouped into clear categories. These include details about what is included, excluded, emphasized, essential, or safety-related, ensuring transparency and enhancing the option’s appeal to customers. Note: Features are intentionally repeated at both product and option levels, allowing suppliers to specify details where most applicable. Resellers must combine information from both levels for a comprehensive customer view.
   */
  features?: Array<Feature>;
};

export type UnitItem = {
  /**
   * The id of the unit, this will be unique to the option.
   */
  uuid: string;
  /**
   * A reference the reseller uses to identify the unit within all bookings.
   */
  resellerReference: string | null;
  /**
   * A reference the supplier uses to identify the unit within all bookings.
   */
  supplierReference: string | null;
  /**
   * This MUST be a unique identifier within the scope of the option.
   */
  unitId: string;
  unit?: Unit;
  /**
   * The status of the booking, possible values are:
   * `ON_HOLD` The booking is pending confirmation, this is the default value when you first create the booking.
   * `EXPIRED` If the booking is not confirmed before the expiration hold expires, it goes into an expired state.
   * `CONFIRMED` Once the confirmation call is made the booking is ready to be used.
   * `CANCELLED` If the booking is cancelled.
   * `PENDING` If the booking is pending outside availability confirmation.
   * `REDEEMED` If the booking is already redeemed.
   */
  status: BookingStatus;
  /**
   * The ISO8601 date in UTC indicating when the ticket was used at the attraction.
   */
  utcRedeemedAt: string | null;
  /**
   * Contact details for the guests that will attend the tour/attraction. Contact Body can be applied to both the booking object (the main reservation) or the unit object (individual ticket holders - if the supplier requires this information)
   */
  contact: Contact;
  ticket: Ticket | null;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Pricing;
};

export type UnitItemPricing = {
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Pricing;
};

export type UnitPricing = {
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricingFrom?: Array<Pricing>;
  /**
   * Is on the object when Pricing capability is requested.
   */
  pricing?: Array<Pricing>;
};

export type UnitRestrictions = {
  /**
   * Minimum age to purchase the unit.
   */
  minAge: number;
  /**
   * Maximum age to purchase the unit.
   */
  maxAge: number;
  /**
   * Indicates if identification (e.g., student ID) is required for redemption.
   */
  idRequired: boolean;
  /**
   * Minimum number of units that must be purchased (e.g., 2 tickets). Null means no minimum.
   */
  minQuantity: number | null;
  /**
   * Maximum number of units allowed in a single booking. Null means unlimited.
   */
  maxQuantity: number | null;
  /**
   * The number of people each unit represents (e.g., 1 family ticket = 4 pax).
   */
  paxCount: number;
  /**
   * Specifies if this unit must be accompanied by another unit (e.g., an infant ticket must be purchased with an adult ticket). Array of unit IDs which must be booked together.
   */
  accompaniedBy: Array<string>;
  /**
   * Minimum height required for this unit (e.g., for amusement park rides).
   */
  minHeight?: number;
  /**
   * Maximum height allowed.
   */
  maxHeight?: number;
  /**
   * Unit of height measurement (e.g., "cm" or "in") used for values of minHeight, maxHeight.
   */
  heightUnit?: string;
  /**
   * Minimum weight required.
   */
  minWeight?: number;
  /**
   * Maximum weight allowed.
   */
  maxWeight?: number;
  /**
   * Unit of weight measurement (e.g., "kg" or "lb") used for values of minWeight, maxWeight.
   */
  weightUnit?: string;
};

export enum UnitType {
  ADULT = 'ADULT',
  YOUTH = 'YOUTH',
  CHILD = 'CHILD',
  INFANT = 'INFANT',
  FAMILY = 'FAMILY',
  SENIOR = 'SENIOR',
  STUDENT = 'STUDENT',
  MILITARY = 'MILITARY',
  OTHER = 'OTHER',
}

/**
 * The UUID of the booking
 */
export type BookingCancellationRequestUuid = string;

/**
 * The UUID of the booking
 */
export type BookingConfirmationRequestUuid = string;

/**
 * The UUID of the booking
 */
export type BookingUpdateRequestUuid = string;

/**
 * The UUID of the booking
 */
export type ExtendReservationRequestUuid = string;

/**
 * The UUID of the booking
 */
export type GetBookingRequestUuid = string;

/**
 * All bookings made for a specific date
 */
export type GetBookingsRequestLocalDate = string;

/**
 * Last date of a date range search
 */
export type GetBookingsRequestLocalDateEnd = string;

/**
 * First date of a date range search
 */
export type GetBookingsRequestLocalDateStart = string;

/**
 * The option id to filter by
 */
export type GetBookingsRequestOptionId = string;

/**
 * The product id to filter by
 */
export type GetBookingsRequestProductId = string;

/**
 * The reseller reference on the booking
 */
export type GetBookingsRequestResellerReference = string;

/**
 * The reference provided by the supplier
 */
export type GetBookingsRequestSupplierReference = string;

/**
 * The product id
 */
export type GetProductRequestId = string;

/**
 * A list of the Capabilities (their IDs) initialized with your request.
 */
export type RequestHeadersOctoCapabilities = string;

/**
 * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
 */
export type RequestHeadersContent = string;

export type AvailabilitiesAvailabilityCheckData = {
  body: AvailabilityCheckBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: never;
  url: '/availability/';
};

export type AvailabilitiesAvailabilityCheckErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidProductId
    | ErrorInvalidOptionId
    | ErrorBadRequest
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type AvailabilitiesAvailabilityCheckError =
  AvailabilitiesAvailabilityCheckErrors[keyof AvailabilitiesAvailabilityCheckErrors];

export type AvailabilitiesAvailabilityCheckResponses = {
  /**
   * The request has succeeded.
   */
  200: Array<Availability>;
};

export type AvailabilitiesAvailabilityCheckResponse =
  AvailabilitiesAvailabilityCheckResponses[keyof AvailabilitiesAvailabilityCheckResponses];

export type AvailabilitiesAvailabilityCalendarData = {
  body: AvailabilityCalendarBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: never;
  url: '/availability/calendar';
};

export type AvailabilitiesAvailabilityCalendarErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidProductId
    | ErrorInvalidOptionId
    | ErrorBadRequest
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type AvailabilitiesAvailabilityCalendarError =
  AvailabilitiesAvailabilityCalendarErrors[keyof AvailabilitiesAvailabilityCalendarErrors];

export type AvailabilitiesAvailabilityCalendarResponses = {
  /**
   * The request has succeeded.
   */
  200: Array<AvailabilityCalendar>;
};

export type AvailabilitiesAvailabilityCalendarResponse =
  AvailabilitiesAvailabilityCalendarResponses[keyof AvailabilitiesAvailabilityCalendarResponses];

export type BookingsGetBookingsData = {
  body?: never;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: {
    /**
     * The reseller reference on the booking
     */
    resellerReference?: string;
    /**
     * The reference provided by the supplier
     */
    supplierReference?: string;
    /**
     * All bookings made for a specific date
     */
    localDate?: string;
    /**
     * First date of a date range search
     */
    localDateStart?: string;
    /**
     * Last date of a date range search
     */
    localDateEnd?: string;
    /**
     * The product id to filter by
     */
    productId?: string;
    /**
     * The option id to filter by
     */
    optionId?: string;
  };
  url: '/bookings/';
};

export type BookingsGetBookingsErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400: ErrorUnauthorized | ErrorInternalServerError | ErrorForbidden;
};

export type BookingsGetBookingsError = BookingsGetBookingsErrors[keyof BookingsGetBookingsErrors];

export type BookingsGetBookingsResponses = {
  /**
   * The request has succeeded.
   */
  200: Array<Booking>;
};

export type BookingsGetBookingsResponse = BookingsGetBookingsResponses[keyof BookingsGetBookingsResponses];

export type BookingsBookingReservationData = {
  body: BookingReservationBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: never;
  url: '/bookings/';
};

export type BookingsBookingReservationErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidProductId
    | ErrorInvalidOptionId
    | ErrorInvalidUnitId
    | ErrorInvalidAvailabilityId
    | ErrorUnprocessableEntity
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type BookingsBookingReservationError = BookingsBookingReservationErrors[keyof BookingsBookingReservationErrors];

export type BookingsBookingReservationResponses = {
  /**
   * The request has succeeded.
   */
  200: Booking;
};

export type BookingsBookingReservationResponse =
  BookingsBookingReservationResponses[keyof BookingsBookingReservationResponses];

export type BookingsGetBookingData = {
  body?: never;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path: {
    /**
     * The UUID of the booking
     */
    uuid: string;
  };
  query?: never;
  url: '/bookings/{uuid}';
};

export type BookingsGetBookingErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400: ErrorInvalidBookingUuid | ErrorUnauthorized | ErrorInternalServerError | ErrorForbidden;
};

export type BookingsGetBookingError = BookingsGetBookingErrors[keyof BookingsGetBookingErrors];

export type BookingsGetBookingResponses = {
  /**
   * The request has succeeded.
   */
  200: Booking;
};

export type BookingsGetBookingResponse = BookingsGetBookingResponses[keyof BookingsGetBookingResponses];

export type BookingsBookingUpdateData = {
  body: BookingUpdateBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path: {
    /**
     * The UUID of the booking
     */
    uuid: string;
  };
  query?: never;
  url: '/bookings/{uuid}';
};

export type BookingsBookingUpdateErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidProductId
    | ErrorInvalidOptionId
    | ErrorInvalidUnitId
    | ErrorInvalidAvailabilityId
    | ErrorInvalidBookingUuid
    | ErrorUnprocessableEntity
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type BookingsBookingUpdateError = BookingsBookingUpdateErrors[keyof BookingsBookingUpdateErrors];

export type BookingsBookingUpdateResponses = {
  /**
   * The request has succeeded.
   */
  200: Booking;
};

export type BookingsBookingUpdateResponse = BookingsBookingUpdateResponses[keyof BookingsBookingUpdateResponses];

export type BookingsBookingCancellationData = {
  body: BookingCancellationBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path: {
    /**
     * The UUID of the booking
     */
    uuid: string;
  };
  query?: never;
  url: '/bookings/{uuid}/cancel';
};

export type BookingsBookingCancellationErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidBookingUuid
    | ErrorUnprocessableEntity
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type BookingsBookingCancellationError =
  BookingsBookingCancellationErrors[keyof BookingsBookingCancellationErrors];

export type BookingsBookingCancellationResponses = {
  /**
   * The request has succeeded.
   */
  200: Booking;
};

export type BookingsBookingCancellationResponse =
  BookingsBookingCancellationResponses[keyof BookingsBookingCancellationResponses];

export type BookingsBookingConfirmationData = {
  body: BookingConfirmationBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path: {
    /**
     * The UUID of the booking
     */
    uuid: string;
  };
  query?: never;
  url: '/bookings/{uuid}/confirm';
};

export type BookingsBookingConfirmationErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidProductId
    | ErrorInvalidOptionId
    | ErrorInvalidUnitId
    | ErrorInvalidAvailabilityId
    | ErrorInvalidBookingUuid
    | ErrorUnprocessableEntity
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type BookingsBookingConfirmationError =
  BookingsBookingConfirmationErrors[keyof BookingsBookingConfirmationErrors];

export type BookingsBookingConfirmationResponses = {
  /**
   * The request has succeeded.
   */
  200: Booking;
};

export type BookingsBookingConfirmationResponse =
  BookingsBookingConfirmationResponses[keyof BookingsBookingConfirmationResponses];

export type BookingsExtendReservationData = {
  body: ExtendReservationBody;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path: {
    /**
     * The UUID of the booking
     */
    uuid: string;
  };
  query?: never;
  url: '/bookings/{uuid}/extend';
};

export type BookingsExtendReservationErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400:
    | ErrorInvalidBookingUuid
    | ErrorUnprocessableEntity
    | ErrorUnauthorized
    | ErrorInternalServerError
    | ErrorForbidden;
};

export type BookingsExtendReservationError = BookingsExtendReservationErrors[keyof BookingsExtendReservationErrors];

export type BookingsExtendReservationResponses = {
  /**
   * The request has succeeded.
   */
  200: Booking;
};

export type BookingsExtendReservationResponse =
  BookingsExtendReservationResponses[keyof BookingsExtendReservationResponses];

export type CapabilitiesGetData = {
  body?: never;
  headers?: {
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: never;
  url: '/capabilities/';
};

export type CapabilitiesGetResponses = {
  /**
   * The request has succeeded.
   */
  200: Array<Capability>;
};

export type CapabilitiesGetResponse = CapabilitiesGetResponses[keyof CapabilitiesGetResponses];

export type ProductsGetProductsData = {
  body?: never;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: never;
  url: '/products/';
};

export type ProductsGetProductsErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400: ErrorUnauthorized | ErrorInternalServerError | ErrorForbidden;
};

export type ProductsGetProductsError = ProductsGetProductsErrors[keyof ProductsGetProductsErrors];

export type ProductsGetProductsResponses = {
  /**
   * The request has succeeded.
   */
  200: Array<Product>;
};

export type ProductsGetProductsResponse = ProductsGetProductsResponses[keyof ProductsGetProductsResponses];

export type ProductsGetProductData = {
  body?: never;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path: {
    /**
     * The product id
     */
    id: string;
  };
  query?: never;
  url: '/products/{id}';
};

export type ProductsGetProductErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400: ErrorInvalidProductId | ErrorUnauthorized | ErrorInternalServerError | ErrorForbidden;
};

export type ProductsGetProductError = ProductsGetProductErrors[keyof ProductsGetProductErrors];

export type ProductsGetProductResponses = {
  /**
   * The request has succeeded.
   */
  200: Product;
};

export type ProductsGetProductResponse = ProductsGetProductResponses[keyof ProductsGetProductResponses];

export type SuppliersGetData = {
  body?: never;
  headers: {
    /**
     * A list of the Capabilities (their IDs) initialized with your request.
     */
    'Octo-Capabilities': string;
    /**
     * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
     */
    'Accept-Language'?: string;
  };
  path?: never;
  query?: never;
  url: '/supplier/';
};

export type SuppliersGetErrors = {
  /**
   * The server could not understand the request due to invalid syntax.
   */
  400: ErrorUnauthorized | ErrorInternalServerError | ErrorForbidden;
};

export type SuppliersGetError = SuppliersGetErrors[keyof SuppliersGetErrors];

export type SuppliersGetResponses = {
  /**
   * The request has succeeded.
   */
  200: Supplier;
};

export type SuppliersGetResponse = SuppliersGetResponses[keyof SuppliersGetResponses];

export type ClientOptions = {
  baseUrl:
    | 'http://localhost:8080/api/octo'
    | 'https://ventrata-api-1011165921260.us-central1.run.app/api/octo'
    | (string & {});
};
